{"version":3,"file":"UIMods.cjs.js","sources":["../../../lib/ui-helpers/UIMods.ts"],"sourcesContent":["/*!\r\n * zephyr-ui v1.1.3\r\n * (c) 2025 Zacharia Haggy (repl1307)\r\n * Released under the MIT License\r\n */\r\nimport { BaseUI } from \"../UI\";\r\n\r\ntype Constructor<T = {}> = new (...args: any[]) => T;\r\n\r\nfunction UIModsMixin<TBase extends Constructor<BaseUI>>(Base: TBase) {\r\n  return class extends Base {\r\n    /** Append a child UI element, or a list of child UI elements */\r\n    appendChild(uiElement: BaseUI | HTMLElement | (BaseUI | HTMLElement)[]) {\r\n      return this.append(uiElement);\r\n    }\r\n\r\n    /**  Append a child UI element, or a list of child UI elements */\r\n    append(uiElement: BaseUI | HTMLElement | (BaseUI | HTMLElement)[]) {\r\n      if (arguments.length > 1) {\r\n        throw new Error(\"append does not support multiple arguments.\");\r\n      }\r\n      const handleAppend = (elem: BaseUI | HTMLElement) => {\r\n        if (elem instanceof HTMLElement) {\r\n          const ui = new BaseUI(elem);\r\n          this.html.appendChild(ui.html);\r\n          this.children.push(ui);\r\n          return this;\r\n        }\r\n        this.children.push(elem);\r\n        this.html.appendChild(elem.html);\r\n      };\r\n  \r\n      if (Array.isArray(uiElement)) {\r\n        for (const elem of uiElement) {\r\n          handleAppend(elem);\r\n        }\r\n      } else {\r\n        handleAppend(uiElement);\r\n      }\r\n  \r\n      return this;\r\n    }\r\n\r\n    /** Insert a UI element before another one */\r\n    insertBefore(uiElement: BaseUI|HTMLElement, beforeChild: BaseUI|HTMLElement) {\r\n      const before = beforeChild instanceof HTMLElement ? beforeChild : beforeChild.html;\r\n      const newElem = uiElement instanceof HTMLElement ? uiElement : uiElement.html;\r\n      this.html.insertBefore(newElem, before);\r\n      if (!(uiElement instanceof HTMLElement)) {\r\n        this.children.push(uiElement);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /** Given either the index or the child itself, remove it */\r\n    removeChild(child: number|BaseUI) {\r\n      if (typeof child === \"number\") {\r\n        child = this.children[child] as BaseUI;\r\n      }\r\n      this.children.splice(this.children.indexOf(child), 1);\r\n      this.html.removeChild(child.html);\r\n      return child;\r\n    }\r\n\r\n    /** Set the text content of the UI element, clearing any previously set text and HTML */\r\n    setText(text : string): this {\r\n      this.html.textContent = text;\r\n      return this;\r\n    }\r\n      \r\n    /** Adds to the text content of the UI element, preserving previously set text */\r\n    addText(text: string) {\r\n      this.html.textContent += text;\r\n      return this;\r\n    }\r\n    /** Gets the text content of the UI element */\r\n    getText(){\r\n      return this.html.textContent;\r\n    }\r\n\r\n    /** Sets inner HTML content to the provided HTML string */\r\n    setInnerHtml(html: string) {\r\n      const doc = BaseUI.parser.parseFromString(html, \"text/html\");\r\n      while (this.html.firstChild) {\r\n        this.html.removeChild(this.html.firstChild);\r\n      }\r\n      this.append(doc.body);\r\n      return this;\r\n    }\r\n    \r\n    /** Adds to the inner HTML of the UI element, preserving previously set inner HTML */\r\n    addInnerHtml(html: string) {\r\n      const doc = BaseUI.parser.parseFromString(html, \"text/html\");\r\n      this.append(doc.body);\r\n      return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the CSS of a UI element. Two possible ways to use:\r\n     *  -  setStyle(\"property name\", \"value\")  \r\n     *  -  setStyle({ propertyName: \"value\" })\r\n    */\r\n    setStyle(...args: [string, string|number] | [Record<string, string|number>]) {\r\n      if (args.length === 2) {\r\n        const [property, value] = args;\r\n        this.html.style[property] = value;\r\n      } else {\r\n        const styles = args[0];\r\n        for (const [property, value] of Object.entries(styles)) {\r\n          this.html.style[property] = value;\r\n        }\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /** Modifies an HTML attribute of the UI element */\r\n    setAttribute(attribute: string, value: string) {\r\n      this.html.setAttribute(attribute, value);\r\n      return this;\r\n    }\r\n\r\n    /** Gets an HTML attribute of the UI element */\r\n    getAttribute(attribute: string) {\r\n      return this.html.getAttribute(attribute);\r\n    }\r\n\r\n    /** Gets the value attribute of the UI element's html */\r\n    getValue(){\r\n      const hasValueProperty = (element: HTMLElement): \r\n        element is\r\n        | HTMLInputElement | HTMLTextAreaElement\r\n        | HTMLSelectElement | HTMLOptionElement\r\n        | HTMLButtonElement | HTMLProgressElement\r\n        | HTMLMeterElement | HTMLOutputElement => {\r\n          return 'value' in element;\r\n      };\r\n\r\n      if(hasValueProperty(this.html))\r\n        return this.html.value\r\n      else\r\n        throw Error('The value property does not exist.');\r\n    }\r\n\r\n    /** Executes a function on all child elements */\r\n    modifyChildren(callback: (child: BaseUI) => void) {\r\n      for (const child of this.children) {\r\n        callback(child);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /** Adds CSS classes to the UI element */\r\n    addClass(...classes: string[]) {\r\n      this.html.classList.add(...classes);\r\n      return this;\r\n    }\r\n\r\n    /** Removes CSS classes from the UI element */\r\n    removeClass(...classes: string[]) {\r\n      this.html.classList.remove(...classes);\r\n      return this;\r\n    }\r\n\r\n    /** Toggles CSS classes for the UI element */\r\n    toggleClass(...classes: string[]) {\r\n      for (const c of classes) {\r\n        this.html.classList.toggle(c);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    /** Completely removes all HTML and child UI elements attached to this element */\r\n    remove() {\r\n      this.html.remove();\r\n      for (const child of this.children) {\r\n        if (child.html) {\r\n          child.html.remove();\r\n        } else {\r\n          child.remove();\r\n        }\r\n      }\r\n      this.children = [];\r\n      return this;\r\n    }\r\n\r\n    /** Completely removes all child UI elements attached to this element */\r\n    removeChildren() {\r\n      for (const child of this.children) {\r\n        if (child.html) {\r\n          child.html.remove();\r\n        } else {\r\n          child.remove();\r\n        }\r\n      }\r\n      this.children = [];\r\n      return this;\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport default UIModsMixin;"],"names":["UIModsMixin","Base","uiElement","handleAppend","elem","ui","BaseUI","beforeChild","before","newElem","child","text","html","doc","args","property","value","styles","attribute","element","callback","classes","c"],"mappings":"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"}