{"version":3,"file":"Router.cjs.js","sources":["../../../lib/utilities/Router.js"],"sourcesContent":["import Root from \"../core/Root\";\nimport UI from \"../UI\";\n\n/**\n * Enables route handling on clientside, only one router may exist at any point\n * @class Router\n * @memberof utilities\n */\nclass Router {\n  /** @type {Router|null} */\n  static instance = null\n\n  /** \n   * Handles anchor link for provided element or id\n   * @param {UI|string} link - Either the link element that is to be triggerd or the ID of the anchor\n   */\n  static handleAnchor = link => {\n    if(typeof link == 'string'){\n      if(link.includes('#'))\n        link = link.split('#').at(-1);\n      const anchor = document.getElementById(link);\n      anchor.scrollIntoView({behavior: 'smooth'});\n      return;\n    }\n    link.onClick(e => {\n        e.preventDefault();\n        const anchor = document.getElementById(link.html.href.split('#')[1]);\n        anchor.scrollIntoView({behavior: 'smooth'});\n    });\n  }\n  /**\n   * @param {Root} main - The base UI element of the entire page\n   * @returns this\n   */\n  constructor(main){\n    if(Router.instance != null){\n      console.error('A Router has already been instantiated!');\n      delete this;\n      return;\n    }\n    Router.instance = this;\n    window.addEventListener('popstate', e => {\n      if(e.state == null)\n        this.autoRoute();\n    });\n    /**\n     * List of all routes\n     * @type {Route[]}\n     */\n    this.routes = [];\n    /**\n     * The current route that is being used\n     * @type {Route}\n     */\n    this.currentRoute = null;\n    /** \n     * The current path (Ex: '/docs/doc1')\n     * @type {string}\n    */\n    this.currentPath = \"\";\n    /** \n     * The base path to be inserted before every route\n     * @type {string}\n    */\n    this.basePath = '';\n    /**\n     * The default path to redirect to.\n     * @type {string}\n     */\n    this.defaultRoute = '/';\n    /**\n     * The base UI element for the entire page\n     * @type {UI}\n     */\n    this.main = main;\n  }\n\n  /**\n   * Given the path name and a function that returns a list of UI elements, create a route\n   * @param {string} path - The path name as a string (ex: '/home'). For route parameters, just prefix with \":\", (ex: '/home/:id')\n   * @param {function(string[]?):UI[]} createElemsFunc - Function that takes optional array of route parameters and returns an array of UI elements\n   */\n  createRoute(path, createElemsFunc){\n    path = this.basePath + path;\n    //console.log(\"created path: \"+path);\n    const oldRoute = this.routes.find(route => route.matchesPath(path));\n    if(oldRoute)\n      this.routes.splice(this.routes.indexOf(oldRoute));\n    this.routes.push(new Route(path, createElemsFunc, this));\n    this.routes.at(-1).main = this.main;\n  }\n  /**\n   * Change the route to the specified path.\n   * @param {string} path - The pathname to route to \n   */\n  async setRoute(path){\n    path = this.basePath + path;\n    //console.log(\"setting path: \"+path)\n    const route = this.routes.find(route => route.matchesPath(path));\n    if(route){\n      const url = new URL(window.location.href);\n      url.pathname = path;\n      await route.activate(url);\n    }\n    else\n      console.error(\"Route not found: \"+path);\n  }\n\n  /** auto set route based off of page url */\n  async autoRoute(){\n    const path = window.location.pathname.replace(this.basePath, '');\n    //console.log('Auto route: '+path);\n\n    const url = new URL(window.location.href);\n \n    if(url.hash != ''){\n      //console.log('Is an anchor');\n      // if the current path is the same as the new path, just move to anchor\n      if(this.currentPath == path){\n        Router.handleAnchor(url.hash);\n      } \n      // otherwise, just visit new path then handle anchor\n      else {\n        await this.setRoute(path);\n        Router.handleAnchor(url.hash);\n      }\n      return;\n    }\n    const hasMatch = this.routes.find(route => route.matchesPath(path)) != undefined;\n    if(!hasMatch){\n      await this.setRoute(this.defaultPath);\n    }\n\n    await this.setRoute(path);\n  }\n}\n/**\n * Class for storing a route\n * @class\n */\nclass Route {\n  /**\n   * @param {string} path - The path name as a string (ex: '/home'). For route parameters, just prefix with \":\", (ex: '/home/:id')\n   * @param {function(string?):UI[]} createElemsFunc - Function that takes optional array of route parameters and returns an array of UI elements\n   * @param {Router} router - The router that will store the route\n   */\n  constructor(path, createElemFunc, router){\n    this.path = path.trim();\n    this.pathStructure = this.generatePathStructure();\n    this.createElems = createElemFunc;\n    this.elems = [];\n    this.router = router;\n    this.param = {}; // stores actual param data from current url\n    this.query = {}; // stores query data from current url\n  }\n  //break down path {string} into array of objects containing subpath values and whether they are static or not\n  generatePathStructure(){\n    const pathStructure = [];\n    const subpaths = this.path.split('/');\n    for(const subpath of subpaths){\n      if(subpath == '') continue;\n      pathStructure.push({\n        value: subpath,\n        isStatic: !subpath.startsWith(':')\n      });\n    }\n    return pathStructure;\n  }\n\n  //gets if url path matches path structure of this route\n  matchesPath(path){\n    //console.log(`Getting Match Path: ${path}`);\n    const subpaths = path.trim().split('/');\n    for(let i = 0; i < subpaths.length; i++){\n      const s = subpaths[i];\n      if(s == ''){\n        subpaths.splice(subpaths.indexOf(s), 1);\n        i--;\n      }\n    }\n    if(subpaths.length == 0 && this.pathStructure.length == 0){\n        return true;\n    }\n    if(subpaths.length != this.pathStructure.length){\n        return false;\n    }\n    for(let i = 0; i < subpaths.length; i++){\n      if(subpaths[i] != this.pathStructure[i].value && this.pathStructure[i].isStatic)\n        return false;\n    }\n    //console.log('Match Found!');\n    return true;\n  }\n\n  //activate route\n  /** @param {URL} url */\n  activate = async (url) => {\n    //console.log('Activating path: '+url)\n\n    //remove old elements\n    for(let i = 0; i < this.main.children.length; i++){\n      const child = this.main.children[i];\n      if(!child.preserveOnRerender){\n        this.main.removeChild(i);\n        i--;\n      }\n    }\n\n    //parse url for subpaths and query params\n    const subpaths = url.pathname.split('/');\n    for(const s of subpaths){\n      if(s == '')\n        subpaths.splice(subpaths.indexOf(''), 1);\n    }\n\n    let fullPath = \"\";\n    for(const subpath of subpaths){\n      fullPath += \"/\"+subpath;\n    }\n    for(let i = 0; i < subpaths; i++){\n        fullPath = fullPath.replace(s.value, subpaths[i]);\n    }\n\n    //update url\n    const currentURL = window.location.href;\n    const baseURL = currentURL.split(\"/\").slice(0, 3).join(\"/\");\n    history.pushState(null, null, baseURL+fullPath)\n    this.router.currentPath = fullPath;\n    this.router.currentRoute = this;\n    this.getPathParams(url.pathname);\n\n    //add new elements\n    const elems = await this.createElems(this.router);\n    for(const elem of elems)\n      this.main.append(elem);\n\n  }\n\n  // get path param values\n  getPathParams(path){\n    const subpaths = path.split('/');\n    for(const s of subpaths){\n      if(s == '')\n        subpaths.splice(subpaths.indexOf(''), 1);\n    }\n\n    for(let i = 0; i < this.pathStructure.length; i++){\n      const structure = this.pathStructure[i];\n      if(!structure.isStatic){\n        this.param[structure.value.replace(':', '')] = subpaths[i];\n      }\n    }\n  }\n}\n\nexport { Router, Route };"],"names":["Router","link","main","path","createElemsFunc","oldRoute","route","Route","url","createElemFunc","router","pathStructure","subpaths","subpath","i","s","fullPath","baseURL","elems","elem","structure"],"mappings":"uIAQA,MAAMA,CAAO,CAEX,OAAO,SAAW,KAMlB,OAAO,aAAeC,GAAQ,CAC5B,GAAG,OAAOA,GAAQ,SAAS,CACtBA,EAAK,SAAS,GAAG,IAClBA,EAAOA,EAAK,MAAM,GAAG,EAAE,GAAG,EAAE,GACf,SAAS,eAAeA,CAAI,EACpC,eAAe,CAAC,SAAU,QAAQ,CAAC,EAC1C,MACF,CACAA,EAAK,QAAQ,GAAK,CACd,EAAE,eAAc,EACD,SAAS,eAAeA,EAAK,KAAK,KAAK,MAAM,GAAG,EAAE,CAAC,CAAC,EAC5D,eAAe,CAAC,SAAU,QAAQ,CAAC,CAC9C,CAAC,CACH,EAKA,YAAYC,EAAK,CACf,GAAGF,EAAO,UAAY,KAAK,CACzB,QAAQ,MAAM,yCAAyC,EACvD,OAAO,KACP,MACF,CACAA,EAAO,SAAW,KAClB,OAAO,iBAAiB,WAAY,GAAK,CACpC,EAAE,OAAS,MACZ,KAAK,UAAS,CAClB,CAAC,EAKD,KAAK,OAAS,CAAA,EAKd,KAAK,aAAe,KAKpB,KAAK,YAAc,GAKnB,KAAK,SAAW,GAKhB,KAAK,aAAe,IAKpB,KAAK,KAAOE,CACd,CAOA,YAAYC,EAAMC,EAAgB,CAChCD,EAAO,KAAK,SAAWA,EAEvB,MAAME,EAAW,KAAK,OAAO,KAAKC,GAASA,EAAM,YAAYH,CAAI,CAAC,EAC/DE,GACD,KAAK,OAAO,OAAO,KAAK,OAAO,QAAQA,CAAQ,CAAC,EAClD,KAAK,OAAO,KAAK,IAAIE,EAAMJ,EAAMC,EAAiB,IAAI,CAAC,EACvD,KAAK,OAAO,GAAG,EAAE,EAAE,KAAO,KAAK,IACjC,CAKA,MAAM,SAASD,EAAK,CAClBA,EAAO,KAAK,SAAWA,EAEvB,MAAMG,EAAQ,KAAK,OAAO,KAAKA,GAASA,EAAM,YAAYH,CAAI,CAAC,EAC/D,GAAGG,EAAM,CACP,MAAME,EAAM,IAAI,IAAI,OAAO,SAAS,IAAI,EACxCA,EAAI,SAAWL,EACf,MAAMG,EAAM,SAASE,CAAG,CAC1B,MAEE,QAAQ,MAAM,oBAAoBL,CAAI,CAC1C,CAGA,MAAM,WAAW,CACf,MAAMA,EAAO,OAAO,SAAS,SAAS,QAAQ,KAAK,SAAU,EAAE,EAGzDK,EAAM,IAAI,IAAI,OAAO,SAAS,IAAI,EAExC,GAAGA,EAAI,MAAQ,GAAG,CAGb,KAAK,aAAeL,GAKrB,MAAM,KAAK,SAASA,CAAI,EACxBH,EAAO,aAAaQ,EAAI,IAAI,EAE9B,MACF,CACiB,KAAK,OAAO,KAAKF,GAASA,EAAM,YAAYH,CAAI,CAAC,GAAK,MAErE,MAAM,KAAK,SAAS,KAAK,WAAW,EAGtC,MAAM,KAAK,SAASA,CAAI,CAC1B,CACF,CAKA,MAAMI,CAAM,CAMV,YAAYJ,EAAMM,EAAgBC,EAAO,CACvC,KAAK,KAAOP,EAAK,KAAI,EACrB,KAAK,cAAgB,KAAK,sBAAqB,EAC/C,KAAK,YAAcM,EACnB,KAAK,MAAQ,CAAA,EACb,KAAK,OAASC,EACd,KAAK,MAAQ,GACb,KAAK,MAAQ,EACf,CAEA,uBAAuB,CACrB,MAAMC,EAAgB,CAAA,EAChBC,EAAW,KAAK,KAAK,MAAM,GAAG,EACpC,UAAUC,KAAWD,EAChBC,GAAW,IACdF,EAAc,KAAK,CACjB,MAAOE,EACP,SAAU,CAACA,EAAQ,WAAW,GAAG,CACzC,CAAO,EAEH,OAAOF,CACT,CAGA,YAAYR,EAAK,CAEf,MAAMS,EAAWT,EAAK,KAAI,EAAG,MAAM,GAAG,EACtC,QAAQW,EAAI,EAAGA,EAAIF,EAAS,OAAQE,IAAI,CACtC,MAAMC,EAAIH,EAASE,CAAC,EACjBC,GAAK,KACNH,EAAS,OAAOA,EAAS,QAAQG,CAAC,EAAG,CAAC,EACtCD,IAEJ,CACA,GAAGF,EAAS,QAAU,GAAK,KAAK,cAAc,QAAU,EACpD,MAAO,GAEX,GAAGA,EAAS,QAAU,KAAK,cAAc,OACrC,MAAO,GAEX,QAAQE,EAAI,EAAGA,EAAIF,EAAS,OAAQE,IAClC,GAAGF,EAASE,CAAC,GAAK,KAAK,cAAcA,CAAC,EAAE,OAAS,KAAK,cAAcA,CAAC,EAAE,SACrE,MAAO,GAGX,MAAO,EACT,CAIA,SAAW,MAAON,GAAQ,CAIxB,QAAQM,EAAI,EAAGA,EAAI,KAAK,KAAK,SAAS,OAAQA,IAC9B,KAAK,KAAK,SAASA,CAAC,EACxB,qBACR,KAAK,KAAK,YAAYA,CAAC,EACvBA,KAKJ,MAAMF,EAAWJ,EAAI,SAAS,MAAM,GAAG,EACvC,UAAUO,KAAKH,EACVG,GAAK,IACNH,EAAS,OAAOA,EAAS,QAAQ,EAAE,EAAG,CAAC,EAG3C,IAAII,EAAW,GACf,UAAUH,KAAWD,EACnBI,GAAY,IAAIH,EAElB,QAAQC,EAAI,EAAGA,EAAIF,EAAUE,IACzBE,EAAWA,EAAS,QAAQ,EAAE,MAAOJ,EAASE,CAAC,CAAC,EAKpD,MAAMG,EADa,OAAO,SAAS,KACR,MAAM,GAAG,EAAE,MAAM,EAAG,CAAC,EAAE,KAAK,GAAG,EAC1D,QAAQ,UAAU,KAAM,KAAMA,EAAQD,CAAQ,EAC9C,KAAK,OAAO,YAAcA,EAC1B,KAAK,OAAO,aAAe,KAC3B,KAAK,cAAcR,EAAI,QAAQ,EAG/B,MAAMU,EAAQ,MAAM,KAAK,YAAY,KAAK,MAAM,EAChD,UAAUC,KAAQD,EAChB,KAAK,KAAK,OAAOC,CAAI,CAEzB,EAGA,cAAchB,EAAK,CACjB,MAAMS,EAAWT,EAAK,MAAM,GAAG,EAC/B,UAAUY,KAAKH,EACVG,GAAK,IACNH,EAAS,OAAOA,EAAS,QAAQ,EAAE,EAAG,CAAC,EAG3C,QAAQE,EAAI,EAAGA,EAAI,KAAK,cAAc,OAAQA,IAAI,CAChD,MAAMM,EAAY,KAAK,cAAcN,CAAC,EAClCM,EAAU,WACZ,KAAK,MAAMA,EAAU,MAAM,QAAQ,IAAK,EAAE,CAAC,EAAIR,EAASE,CAAC,EAE7D,CACF,CACF"}